import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score,r2_score,mean_absolute_error,mean_squared_error
from sklearn.model_selection import train_test_split
from scipy.stats import zscore
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'],errors='coerce')
df = df.assign(
    pickup_hour = df['pickup_datetime'].dt.hour,
    pickup_day = df['pickup_datetime'].dt.day,
    pickup_month = df['pickup_datetime'].dt.month,
    pickup_dayofweek = df['pickup_datetime'].dt.dayofweek
)
df = df.drop(['pickup_datetime','key'],axis=1)
df = df.dropna()
df
df = df[(np.abs(zscore(df[['fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']]))<3).all(axis=1)]
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(),annot=True, cmap='coolwarm')
plt.title("Correlation matrix")
plt.show()
x = df.drop(['fare_amount'],axis=1)
y = df['fare_amount']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=42)
lr_model = LinearRegression().fit(x_train,y_train)
y_pred_lr = lr_model.predict(x_test)
rf_model = RandomForestRegressor(n_estimators=100, random_state=42).fit(x_train,y_train)
y_pred_rf = rf_model.predict(x_test)
print("\nLinear Regression Performance:")
print("R2:",r2_score(y_test,y_pred_lr))
print("MAE:",mean_absolute_error(y_test,y_pred_lr))
print("MSE:",mean_squared_error(y_test,y_pred_lr))
print("RMSE:",np.sqrt(mean_squared_error(y_test,y_pred_lr)))

print("\nRandom Forest Regression Performance:")
print("R2:",r2_score(y_test,y_pred_rf))
print("MAE:",mean_absolute_error(y_test,y_pred_rf))
print("MSE:",mean_squared_error(y_test,y_pred_rf))
print("RMSE:",np.sqrt(mean_squared_error(y_test,y_pred_rf)))