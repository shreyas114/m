import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score,confusion_matrix,accuracy_score
df = pd.read_csv("emails.csv")
df
X = df.drop(columns = ['Email No.','Prediction'])
y = df['Prediction']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state = 42 )
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
k = int(input("Value of k : ")) 
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)
y_pred_knn = knn.predict(X_test)
print("Knn performance")
print("accuracy : ",accuracy_score(y_test,y_pred_knn))
print("R2 : ",r2_score(y_test,y_pred_knn))
print("MSE : ",mean_squared_error(y_test,y_pred_knn))
print("RMSE : ",np.sqrt(mean_squared_error(y_test,y_pred_knn)))
print("MAE : ",mean_absolute_error(y_test,y_pred_knn))
print("confusion matrix : ",confusion_matrix(y_test,y_pred_knn))
svm = SVC(kernel='linear')
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)
print("SVM performance")
print("accuracy : ",accuracy_score(y_test,y_pred_svm))
print("R2 : ",r2_score(y_test,y_pred_svm))
print("MSE : ",mean_squared_error(y_test,y_pred_svm))
print("RMSE : ",np.sqrt(mean_squared_error(y_test,y_pred_svm)))
print("MAE : ",mean_absolute_error(y_test,y_pred_svm))
print("confusion matrix : ",confusion_matrix(y_test,y_pred_svm))